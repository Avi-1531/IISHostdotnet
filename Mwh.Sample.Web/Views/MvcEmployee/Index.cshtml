@model IEnumerable<Mwh.Sample.Domain.Models.EmployeeDto>
@{
    ViewBag.Title = "Manage Employees with MVC Forms | ASP.NET MVC CRUD Tutorial";
    ViewBag.MetaDescription = "Learn how to manage employees using MVC Forms in an ASP.NET MVC application. Explore best practices for CRUD operations and Microsoft support for MVC architecture.";
    ViewBag.MetaKeywords = "ASP.NET MVC, MVC Forms, employee management, CRUD operations, ASP.NET tutorial, MVC best practices, Microsoft support";
}

<div class="container">

    <h2>Manage Employees with MVC Forms</h2>

    <p>
        @Html.ActionLink("Add New Employee", "Create", null, htmlAttributes: new { @class = "btn btn-primary" })
    </p>
    <table id="DataTable" class="table table-bordered table-hover">
        <thead class="thead-dark">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                     @Html.DisplayNameFor(model => model.Gender)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Age)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.State)
                </th>
                <th>
                    Department
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null)
            {
                foreach (var item in Model)
                {
                    <tr>
                        <td>
                            <img src="~/images/@item.ProfilePicture"
                         class="rounded-circle"
                         height="40" width="40"
                         asp-append-version="true" />
                            @Html.ActionLink(item.Name, "Edit", new { id = item.Id }, htmlAttributes: new { @class = "" })

                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Gender)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Age)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.State)
                        </td>
                        <td>
                            @item.Department.ToString()
                        </td>
                        <td>
                            <a href="/MvcEmployee/Edit/@item.Id" title="Edit Employee">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                    <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z"></path>
                                </svg>
                            </a>

                            <a href="/MvcEmployee/Delete/@item.Id" title="Delete Employee">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"></path>
                                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"></path>
                                </svg>
                            </a>


                        </td>
                    </tr>
                }
            }
        </tbody>
        <tfoot></tfoot>
    </table>
</div>

<div class="container mt-4">
    <h3>MVC Forms Approach in ASP.NET MVC</h3>
    <p>
        The MVC Forms approach allows developers to build applications with strong separation of concerns, making it easier to maintain and scale.
        It supports robust form handling and validation mechanisms, enabling secure and efficient data entry and modification.
    </p>
    <h4>Best Practices for MVC Forms:</h4>
    <ul>
        <li>Utilize <code>[HttpGet]</code> and <code>[HttpPost]</code> attributes for appropriate routing and data handling.</li>
        <li>Implement validation using Data Annotations or custom validation logic.</li>
        <li>Use <code>@Html.AntiForgeryToken()</code> to prevent CSRF attacks.</li>
    </ul>
    <h4>Pros and Cons of MVC Forms Approach:</h4>
    <ul>
        <li><strong>Pros:</strong> Clear separation of concerns, easy to test, comprehensive model binding and validation support.</li>
        <li><strong>Cons:</strong> Can become complex with large forms, requires knowledge of HTML helpers and model binding.</li>
    </ul>
    <p>
        Microsoft continues to support the MVC architecture, providing ongoing updates and improvements. With .NET 8, ASP.NET MVC remains a reliable choice for building web applications with a clean, maintainable architecture.
    </p>
</div>
<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-body">
            <h3 class="card-title">CRUD Functionality in MVC</h3>
            <p class="card-text">
                In classic MVC architecture, CRUD operations are implemented using Controller actions and views for each activity: Create, Read, Update, and Delete.
                The <strong>Create</strong> action uses a form to capture new employee data, which is saved to the database upon submission.
                The <strong>Read</strong> action displays a list of employees retrieved from the database, as seen in the table above.
                <strong>Update</strong> allows editing of an employee's details, while <strong>Delete</strong> provides a confirmation before removal.
            </p>
            <p class="card-text">
                You can generate views for each CRUD operation directly from your Entity Framework entities using scaffolding tools.
                This automates the process of creating views and wiring up the controller. However, it is best practice to use ViewModels rather than exposing your entities directly to the view,
                ensuring better separation of concerns and security.
            </p>
        </div>
    </div>
</div>

@section scripts {
    <script type="text/javascript">

        var table = $("#DataTable").DataTable({
            responsive: true,
            stateSave: true,
            dom: "Bfrtip",
            order: [[1, "desc"]],
            "columnDefs": [
                { "visible": false, "targets": 2, 3, 4 }
            ],
        });

    </script>
}
