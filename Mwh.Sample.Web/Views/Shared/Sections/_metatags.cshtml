@using System.IO
@using System.Text.Json
@using System.Text.RegularExpressions
@using Mwh.Sample.Web.Helpers
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment Environment
@{
    // Retrieve the necessary parts of the URL from the request
    var request = ViewContext.HttpContext.Request;
    var scheme = request.Scheme;
    var host = request.Host;
    var path = request.Path;
    var queryString = request.QueryString;

    // Construct the canonical URL based on the current path
    var canonicalUrl = $"{scheme}://{host}{path}{queryString}";
    var baseUrl = $"{scheme}://{host}";

    // Safely retrieve route data values and handle potential nulls
    var areaName = ViewContext.RouteData.Values["area"]?.ToString() ?? string.Empty;
    var controllerName = ViewContext.RouteData.Values["controller"]?.ToString() ?? string.Empty;
    var actionName = ViewContext.RouteData.Values["action"]?.ToString() ?? string.Empty;
    var idName = ViewContext.RouteData.Values["id"]?.ToString() ?? string.Empty;
    actionName = actionName == "Index" ? string.Empty : actionName;
    controllerName = controllerName == "Home" ? string.Empty : controllerName;
    
    // Construct the current path based on area, controller, and action
    var currentPath = !string.IsNullOrEmpty(areaName)
    ? $"/{areaName}/{controllerName}/{actionName}/{idName}"
    : $"/{controllerName}/{actionName}/{idName}";

    currentPath = Regex.Replace(currentPath, "/+", "/");

    // Enhanced meta descriptions based on context
    var enhancedDescription = GenerateEnhancedDescription(controllerName, actionName, ViewData);
    
    // Initialize meta tags with default values
    var Title = ViewData["Title"] as string ?? "Sample MVC CRUD Tutorial";
    var Description = ViewData["Description"] as string ?? enhancedDescription;
    var Keywords = ViewData["Keywords"] as string ?? GenerateContextualKeywords(controllerName, actionName);
    
    // ViewData overrides for Title and Description
    Title = ViewData["Title"] as string ?? Title;
    Description = ViewData["Description"] as string ?? Description;
    Keywords = ViewData["Keywords"] as string ?? Keywords;

    // Generate breadcrumbs for structured data
    var breadcrumbs = BreadcrumbHelper.GenerateBreadcrumbs(ViewContext);
}

@functions {
    private string GenerateEnhancedDescription(string controllerName, string actionName, ViewDataDictionary viewData)
    {
        // Check if we have a custom description first
        if (viewData.ContainsKey("Description") && !string.IsNullOrEmpty(viewData["Description"]?.ToString()))
        {
            return viewData["Description"]?.ToString() ?? string.Empty;
        }

        // Generate contextual descriptions
        return (controllerName?.ToLower(), actionName?.ToLower()) switch
        {
            ("", "") => "Comprehensive ASP.NET MVC CRUD tutorial demonstrating employee management with various architectural patterns including MVC, Razor Pages, and Single Page Applications. Learn deployment strategies to Azure with Docker and GitHub Actions.",
            ("mvcemployee", "") => "Learn employee management using traditional ASP.NET MVC patterns with full CRUD operations, form handling, and data validation best practices.",
            ("mvcemployee", "create") => "Create new employee records using ASP.NET MVC forms with proper validation, model binding, and data persistence techniques.",
            ("mvcemployee", "edit") => "Edit and update employee information using ASP.NET MVC with form validation and secure data handling practices.",
            ("mvcemployee", "details") => "View detailed employee information in a clean, structured format using ASP.NET MVC view patterns and data presentation techniques.",
            ("mvcemployee", "delete") => "Safely delete employee records with confirmation dialogs and proper error handling using ASP.NET MVC best practices.",
            ("employee", "") => "Experience dynamic employee management using AJAX and jQuery for seamless CRUD operations without page reloads, demonstrating modern web development techniques.",
            ("employeesinglepage", "") => "Explore a modern Single Page Application (SPA) built with JavaScript, AJAX, and RESTful APIs for efficient employee management and enhanced user experience.",
            ("employeepivot", "") => "Analyze employee data using interactive pivot tables with PivotTable.js for advanced data visualization and business intelligence insights.",
            _ => $"Explore the {controllerName} section of our comprehensive ASP.NET MVC CRUD tutorial application with hands-on examples and best practices."
        };
    }

    private string GenerateContextualKeywords(string controllerName, string actionName)
    {
        var baseKeywords = "ASP.NET MVC, CRUD operations, web development, .NET 9.0, tutorial";
        
        var contextualKeywords = (controllerName?.ToLower(), actionName?.ToLower()) switch
        {
            ("mvcemployee", _) => "MVC Forms, model binding, form validation, employee management, ASP.NET MVC tutorial",
            ("employee", _) => "AJAX, jQuery, partial views, dynamic forms, JavaScript CRUD",
            ("employeesinglepage", _) => "Single Page Application, SPA, REST API, JavaScript, modern web development",
            ("employeepivot", _) => "data visualization, pivot tables, PivotTable.js, business intelligence, data analysis",
            _ => "employee management, database operations, web application development"
        };

        return $"{baseKeywords}, {contextualKeywords}";
    }
}

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-75XXTZ5TQJ"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'G-75XXTZ5TQJ');
</script>

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>@Title - SampleMvcCRUD</title>
<meta name="description" content="@Description" />
<meta name="keywords" content="@Keywords" />
<meta name="robots" content="index, follow" />
<meta name="author" content="Mark Hazleton" />
<link rel="canonical" href="@canonicalUrl" />

<!-- Favicon and App Icons -->
<link rel="icon" type="image/svg+xml" href="/favicon.svg">
<link rel="icon" type="image/x-icon" href="/favicon.ico">
<link rel="apple-touch-icon" sizes="180x180" href="/favicon.svg">
<meta name="theme-color" content="#0d6efd">
<meta property="og:title" content="@Title" />
<meta property="og:description" content="@Description" />
<meta property="og:image" content="https://webspark.markhazleton.com/image.png" />
<meta property="og:url" content="@canonicalUrl" />
<meta property="og:type" content="website" />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content="@Title" />
<meta name="twitter:description" content="@Description" />
<meta name="twitter:image" content="https://webspark.markhazleton.com/image.png" />

<!-- Structured Data (JSON-LD) -->
<script type="application/ld+json">
@Html.Raw(StructuredDataHelper.GenerateOrganizationSchema(baseUrl))
</script>

<script type="application/ld+json">
@Html.Raw(StructuredDataHelper.GenerateWebSiteSchema(baseUrl))
</script>

@if (breadcrumbs.Count > 1)
{
<script type="application/ld+json">
@Html.Raw(StructuredDataHelper.GenerateBreadcrumbSchema(breadcrumbs, baseUrl))
</script>
}

@if (controllerName?.ToLower().Contains("employee") == true || 
     ViewContext.HttpContext.Request.Path.Value?.Contains("employee") == true)
{
<script type="application/ld+json">
@Html.Raw(StructuredDataHelper.GenerateTutorialSchema(Title, Description, baseUrl, canonicalUrl))
</script>
}

@if (string.IsNullOrEmpty(controllerName) || controllerName.Equals("Home", StringComparison.OrdinalIgnoreCase))
{
<script type="application/ld+json">
@Html.Raw(StructuredDataHelper.GenerateSoftwareApplicationSchema(baseUrl))
</script>
}
